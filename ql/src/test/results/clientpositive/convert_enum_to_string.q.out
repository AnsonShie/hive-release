PREHOOK: query: -- Ensure Enum fields are converted to strings (instead of struct<value:int>)

create table convert_enum_to_string
  partitioned by (b string)
  row format serde "org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer"
    with serdeproperties (
      "serialization.class"="org.apache.hadoop.hive.serde2.thrift.test.MegaStruct",
      "serialization.format"="org.apache.thrift.protocol.TBinaryProtocol")
PREHOOK: type: CREATETABLE
POSTHOOK: query: -- Ensure Enum fields are converted to strings (instead of struct<value:int>)

create table convert_enum_to_string
  partitioned by (b string)
  row format serde "org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer"
    with serdeproperties (
      "serialization.class"="org.apache.hadoop.hive.serde2.thrift.test.MegaStruct",
      "serialization.format"="org.apache.thrift.protocol.TBinaryProtocol")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@convert_enum_to_string
PREHOOK: query: describe convert_enum_to_string
PREHOOK: type: DESCTABLE
POSTHOOK: query: describe convert_enum_to_string
POSTHOOK: type: DESCTABLE
my_bool             	boolean             	                    
my_byte             	tinyint             	                    
my_16bit_int        	smallint            	                    
my_32bit_int        	int                 	                    
my_64bit_int        	bigint              	                    
my_double           	double              	                    
my_string           	string              	                    
my_binary           	struct<hb:binary,offset:int,isreadonly:boolean,bigendian:boolean,nativebyteorder:boolean>	                    
my_string_string_map	map<string,string>  	                    
my_string_enum_map  	map<string,string>  	                    
my_enum_string_map  	map<string,string>  	                    
my_enum_struct_map  	map<string,struct<my_string:string,my_enum:string,optionals:struct<>>>	                    
my_enum_stringlist_map	map<string,array<string>>	                    
my_enum_structlist_map	map<string,array<struct<my_string:string,my_enum:string,optionals:struct<>>>>	                    
my_stringlist       	array<string>       	                    
my_structlist       	array<struct<my_string:string,my_enum:string,optionals:struct<>>>	                    
my_enumlist         	array<string>       	                    
my_stringset        	struct<>            	                    
my_enumset          	struct<>            	                    
my_structset        	struct<>            	                    
optionals           	struct<>            	                    
b                   	string              	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
	 	 
b                   	string              	                    
